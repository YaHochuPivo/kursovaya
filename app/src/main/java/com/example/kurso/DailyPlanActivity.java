package com.example.kurso;

import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.Toast;
import androidx.appcompat.widget.Toolbar;


import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.appbar.MaterialToolbar;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.FirebaseFirestore;
import com.example.kurso.TaskItem;


import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.text.SimpleDateFormat;

public class DailyPlanActivity extends AppCompatActivity implements TaskAdapter.OnTaskStatusChangeListener {

    private RecyclerView recyclerView;
    private TaskAdapter adapter;
    private List<TaskItem> taskList;

    private FirebaseFirestore db;
    private String planId = null; // üîπ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_daily_plan);

        MaterialToolbar toolbar = findViewById(R.id.topAppBar);
        setSupportActionBar(toolbar);

        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setDisplayShowTitleEnabled(false);
            // ‚õîÔ∏è –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        }


        Button btnAddTask = findViewById(R.id.btnAddTask);
        Button btnSavePlan = findViewById(R.id.btnSavePlan);
        recyclerView = findViewById(R.id.recyclerViewTasks);
        db = FirebaseFirestore.getInstance();

        taskList = new ArrayList<>();
        taskList.add(new TaskItem("", null, false));


        adapter = new TaskAdapter(this, taskList);
        adapter.setOnTaskStatusChangeListener(this); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å

        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        recyclerView.setAdapter(adapter);

        // üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        btnAddTask.setOnClickListener(v -> {
            taskList.add(new TaskItem("", "", false));

            adapter.notifyItemInserted(taskList.size() - 1);
        });

        // üîπ –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (getIntent().hasExtra("planId")) {
            planId = getIntent().getStringExtra("planId");
            ArrayList<TaskItem> tasksFromIntent = getIntent().getParcelableArrayListExtra("tasks");
            if (tasksFromIntent != null) {
                taskList.clear();
                taskList.addAll(tasksFromIntent);
                adapter.notifyDataSetChanged();
            }
        }
        if (getIntent().hasExtra("tasks")) {
            ArrayList<TaskItem> tasksFromIntent = getIntent().getParcelableArrayListExtra("tasks");
            if (tasksFromIntent != null) {
                taskList.clear();
                taskList.addAll(tasksFromIntent);
                adapter.notifyDataSetChanged();
            }
        }



        btnSavePlan.setOnClickListener(v -> savePlan());
    }

    @Override
    public boolean onSupportNavigateUp() {
        onBackPressed();
        return true;
    }

    @Override
    public void onTaskStatusChanged(int position, boolean isChecked) {
        if (planId != null) {
            TaskItem task = taskList.get(position);
            task.setDone(isChecked);
            updatePlanInFirestore();
        }
    }

    private void updatePlanInFirestore() {
        if (planId == null) return;

        List<Map<String, Object>> formattedTasks = new ArrayList<>();
        for (TaskItem task : taskList) {
            if (task.getText() != null && !task.getText().trim().isEmpty()) {
                Map<String, Object> taskMap = new HashMap<>();
                taskMap.put("text", task.getText());
                taskMap.put("time", task.getTime());
                taskMap.put("done", task.isDone());
                formattedTasks.add(taskMap);
            }
        }

        Map<String, Object> data = new HashMap<>();
        data.put("tasks", formattedTasks);
        data.put("timestamp", new Date());

        db.collection("daily_plans")
            .document(planId)
            .update(data)
            .addOnSuccessListener(aVoid -> {
                Toast.makeText(this, "–ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω", Toast.LENGTH_SHORT).show();
            })
            .addOnFailureListener(e -> {
                Toast.makeText(this, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: " + e.getMessage(), Toast.LENGTH_SHORT).show();
            });
    }

    private void savePlan() {
        FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();
        if (currentUser == null) {
            Log.e("DailyPlanActivity", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞");
            return;
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏
        List<TaskItem> validTasks = new ArrayList<>();
        for (TaskItem task : taskList) {
            if (task.getText() != null && !task.getText().trim().isEmpty()) {
                validTasks.add(task);
            }
        }

        if (validTasks.isEmpty()) {
            Toast.makeText(this, "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–¥–∞—á—É", Toast.LENGTH_SHORT).show();
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∞—Ç—É
        Calendar calendar = Calendar.getInstance();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        
        long timestamp = calendar.getTimeInMillis();

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
        Plan plan = new Plan(validTasks);
        plan.setUserId(currentUser.getUid());
        plan.setTimestamp(timestamp);

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault());
        Log.d("DailyPlanActivity", String.format(
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: userId=%s, timestamp=%d (%s), tasks=%d",
            plan.getUserId(), plan.getTimestamp(), sdf.format(new Date(timestamp)), plan.getTasks().size()));

        // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞–Ω–∞
        if (planId != null) {
            db.collection("daily_plans")
                .document(planId)
                .set(plan)
                .addOnSuccessListener(aVoid -> {
                    Log.d("DailyPlanActivity", "–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: " + planId);
                    Toast.makeText(this, "–ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω", Toast.LENGTH_SHORT).show();
                    finish();
                })
                .addOnFailureListener(e -> {
                    Log.e("DailyPlanActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞", e);
                    Toast.makeText(this, 
                        "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞: " + e.getMessage(), 
                        Toast.LENGTH_SHORT).show();
                });
        } else {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
            db.collection("daily_plans")
                .add(plan)
                .addOnSuccessListener(documentReference -> {
                    Log.d("DailyPlanActivity", "–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: " + documentReference.getId());
                    Toast.makeText(this, "–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω", Toast.LENGTH_SHORT).show();
                    finish();
                })
                .addOnFailureListener(e -> {
                    Log.e("DailyPlanActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞", e);
                    Toast.makeText(this, 
                        "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞: " + e.getMessage(), 
                        Toast.LENGTH_SHORT).show();
                });
        }
    }


}
